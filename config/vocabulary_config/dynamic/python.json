{
    "name": "python",
    "tags": ["multi", "idea", "global"],
    "vocabulary": {
        "argue":             ", ",
        "assign":            " = ",
        "compare eek":       " == ",
        "compare not eek":   " != ",
        "compare greater":   " > ",
        "compare less":      " < ",
        "compare geck":      " >= ",
        "compare lack":      " <= ",
        "times":             " * ",
        "divided by":        " / ",
        "plus":              " + ",
        "minus":             " - ",
        "plus equals":       " += ",
        "minus equals":      " -= ",
        "times equals":      " *= ",
        "divided equal":     " /= ",
        "fun get atter":     "getattr(",
        "fun set atter":     "setattr(",
        "fun has atter":     "hasattr(",
        "fun print":         "print(",
        "fun delete":        "del(",
        "fun range":         "range(",
        "fun length":        "len(",
        "fun is instance":   "isinstance(",
        "fun init":          "__init__(",
        "if test":           "if ",
        "elif test":         "elif ",
        "else":              "else",
        "for loop":          "for ",
        "while loop":        "while ",
        "pass state":        "pass",
        "logic and":         "and ",
        "logic or":          "or ",
        "logic not":         "not ",
        "true":              "True",
        "false":             "False",
        "as name":           "as ",
        "in":                "in ",
        "is":                "is ",
        "deaf":              "def ",
        "deaf init":         "def __init__(",
        "deaf template":     [{"type": "Text", "args": ["def ():"]}, {"type": "Key", "args": ["left:3"]}],
        "class":             "class ",
        "class template":    [{"type": "Text", "args": ["class ():"]}, {"type": "Key", "args": ["left:3"]}],
        "with context":      "with ",
        "import":            "import ",
        "from":              "from ",
        "raise":             "raise ",
        "return":            "return ",
        "yield":             "yield",
        "async yield":       "yield from ",
        "none":              "None",
        "try":               "try",
        "except":            "except",
        "lambda":            "lambda ",
        "self":              "self",
        "private":           [{"type": "Text", "args": ["____"]}, {"type": "Key", "args": ["left:2"]}],
        "dock string":       [{"type": "Text", "args": ["''''''"]}, {"type": "Key", "args": ["left:3"]}],
        "dub dock string":   [{"type": "Text", "args": ["\"\"\"\"\"\""]}, {"type": "Key", "args": ["left:3"]}],
        "!bit ore":          " | ",
        "!bit and":          " & ",
        "!bit ex or":        " ^ ",
        "!mod equal":        " %%= ",
        "!values":           "values",
        "!assert":           "assert "
    }
}
